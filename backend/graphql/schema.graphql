"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    "Return user accounts in the application."
    users: [User!]! @paginate(defaultCount: 10)

    "Return details about a specific user in the application"
    user(id: ID @eq): User @find

    "Validate details of a new user.  Returns true if supplied user fields would be valid."
    validateNewUser(user: ValidateNewUserInput): Boolean @returnTrue

    "Return information about the currently logged in user"
    currentUser: User @auth

    "Return pre-defined user roles in the application"
    role(id: ID @eq): Role @find
}

"Validate the availability of username and email via the validateNewUser query"
input ValidateNewUserInput @validator(class: "UserInputValidator") {
    "Username.  Validation error if not unique"
    username: String

    "Email. Validation error if not unique"
    email: String
}

"""
Input type for userCreate mutation
"""
input CreateUserInput @validator(class: "UserInputValidator") {
    "Display name. (optional)"
    name: String

    "Username. Must be unique. (required)"
    username: String!

    "Email address. Must be unique. (required)"
    email: String!

    "Password used to login to the application. (required)"
    password: String! @hash
}

"""
Update user information
"""
input UpdateUserInput @validator(class: "UserInputValidator") {
    "Display name"
    name: String

    "Username of the user. Must be unique."
    username: String

    "Email address of the user. Must be unique."
    email: String

    "Password used to login to the application."
    password: String @hash
}
"""
A user role for permissions
"""
type Role {
    id: ID!
    name: String!
    guard_name: String!
    created_at: DateTime
    updated_at: DateTime
}

"""
A user account.
"""
type User {
    id: ID!
    name: String
    email: String!
    username: String!
    created_at: DateTime!
    updated_at: DateTime
    roles: [Role!]!
}

type Mutation {
    "Create a new user"
    createUser(user: CreateUserInput! @spread): User! @create

    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User @guard

    "Update the user information"
    updateUser(id: ID!, user: UpdateUserInput! @spread): User! @update
}
