"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type ProfileMetadataSocialMedia {
    google: String
    twitter: String
    facebook: String
    instagram: String
    linkedin: String
    academia_edu_id: String
    skype: String
    zoom: String
}

type ProfileMetadataMailingAddress {
    city: String
    state: String
    postal_code: String
    street_address: String
}

type ProfileMetadata {
    salutation: String
    phone: String
    mailing_address: ProfileMetadataMailingAddress,
    orchid_id: String
    humanities_commons: String
    social_media: ProfileMetadataSocialMedia,
    professional_title: String
    specialization: String
    affiliation: String
    interest_keywords: [String],
    disinterest_keywords: [String],
    biography: [String],
    profile_picture: String
    websites: [String]
}

type Query {
    "Return user accounts in the application."
    users: [User!]! @paginate(defaultCount: 10)

    "Return details about a specific user in the application"
    user(id: ID @eq): User @find

    "Validate details of a new user.  Returns true if supplied user fields would be valid."
    validateNewUser(user: ValidateNewUserInput): Boolean @returnTrue

    "Return information about the currently logged in user"
    currentUser: User @auth

    "Return pre-defined user roles in the application"
    role(id: ID @eq): Role @find

    permission(id: ID @eq): Permission @find
}

"Validate the availability of username and email via the validateNewUser query"
input ValidateNewUserInput @validator(class: "UserInputValidator") {
    "Username.  Validation error if not unique"
    username: String

    "Email. Validation error if not unique"
    email: String
}

"""
Input type for creating a new user via the userCreate mutation
"""
input CreateUserInput @validator(class: "UserInputValidator") {
    "Display name. (optional)"
    name: String

    "Username. Must be unique. (required)"
    username: String!

    "Email address. Must be unique. (required)"
    email: String!

    "Password used to login to the application. (required)"
    password: String! @hash
}

"""
Input type for updating user information via the updateUser mutation
"""
input UpdateUserInput @validator(class: "UserInputValidator") {
    "User ID"
    id: ID!

    "Display name"
    name: String

    "Username of the user. Must be unique."
    username: String

    "Email address of the user. Must be unique."
    email: String

    "Password used to login to the application."
    password: String @hash

    "Arbitrary metadata related to the profile of a user."
    profile_metadata: JSON
}

"""
A permission for roles and users
"""
type Permission {
    id: ID!
    name: String!
    guard_name: String!
    created_at: DateTime
    updated_at: DateTime
}

"""
A user role for permissions
"""
type Role {
    id: ID!
    name: String!
    guard_name: String!
    created_at: DateTime
    updated_at: DateTime
    permissions: [Permission!] @belongsToMany
}

"""
A user account
"""
type User {
    id: ID!
    name: String
    email: String!
    username: String!
    created_at: DateTime!
    updated_at: DateTime
    email_verified_at: DateTime
    roles: [Role!]! @belongsToMany
    permissions: [Permission!] @belongsToMany
    profile_metadata: JSON
}

type Mutation {
    "Create a new user"
    createUser(user: CreateUserInput! @spread): User!
        @create
        @event(dispatch: "Illuminate\\Auth\\Events\\Registered")

    "Verify the currently logged in user's email address"
    verifyEmail(
        "Token supplied to the user via email"
        token: String!

        "Token expiration as a UNIX epoch timestamp"
        expires: String!
    ): User!
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\VerifyEmail@verify")

    "(Re)send a verification email to a user.  "
    sendEmailVerification(
        "User to resend verification for. If not supplied, defaults to the current user."
        id: ID
    ): User!
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\VerifyEmail@send")

    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User @guard

    "Update user information"
    updateUser(user: UpdateUserInput! @spread): User!
        @update
        @can(ability: "update", find: "id")
}
